# This template is rendered by
# apps.blender.resources.scenefileeditor.generate_blender_crop_file(),
# written to tempfile and passed as arg to blender.
import re
import sys
import bpy

try:
    argv = sys.argv[sys.argv.index("--") + 1:]
except ValueError:
    argv = []

class EngineWarning(bpy.types.Operator):
    bl_idname = "wm.engine_warning"
    bl_label = "Inform about not supported rendering engine"

    def execute(self, context):
        self.report({"ERROR"}, "Engine " + bpy.context.scene.render.engine + \
                               " not supported by Golem")
        return {"FINISHED"}

class ShowInformation(bpy.types.Operator):
    bl_idname = "wm.scene_information"
    bl_label = "Inform user about scene settings"

    def execute(self, context):
        self.report({"INFO"}, "Resolution: " +
                              str(bpy.context.scene.render.resolution_x) +
                               " x " +
                               str(bpy.context.scene.render.resolution_y))
        self.report({"INFO"}, "File format: " +
                               str(bpy.context.scene.render.file_extension))
        self.report({"INFO"}, "Filepath: " +
                              str(bpy.context.scene.render.filepath))
        self.report({"INFO"}, "Frames: " +
                              str(bpy.context.scene.frame_start) + "-" +
                              str(bpy.context.scene.frame_end) + ";" +
                              str(bpy.context.scene.frame_step))

        return {"FINISHED"}

uses_gpu = False
gpu = next((x for x in argv if x.startswith('GPU=')), 'GPU=NONE')
_, engine = gpu.split('=')
if engine in ['CUDA', 'OPENCL']:
    context = bpy.context
    context.scene.cycles.device = 'GPU'
    cycles_pref = bpy.context.user_preferences.addons['cycles'].preferences
    device_types_by_preference = [engine, 'NONE']
    present_dev_types = [dt[0] for dt in cycles_pref.get_device_types(context)]
    for device_type in device_types_by_preference:
        if device_type in present_dev_types:
            cycles_pref.compute_device_type = device_type
            break
    for dev in cycles_pref.devices:
        dev.use = True
    uses_gpu = cycles_pref.compute_device_type == engine

bpy.utils.register_class(EngineWarning)
engine = bpy.context.scene.render.engine
if engine not in ("BLENDER_RENDER", "CYCLES"):
    bpy.ops.wm.engine_warning()

bpy.utils.register_class(ShowInformation)
bpy.ops.wm.scene_information()


for scene in bpy.data.scenes:

    tile_size = 2048 if uses_gpu else 16
    scene.render.tile_x = scene.render.tile_y = tile_size
    scene.render.resolution_x = %(resolution_x)d
    scene.render.resolution_y = %(resolution_y)d
    scene.render.resolution_percentage = 100
    scene.render.use_border = True
    scene.render.use_crop_to_border = True
    scene.render.border_max_x = %(border_max_x)r
    scene.render.border_min_x = %(border_min_x)r
    scene.render.border_min_y = %(border_min_y)r
    scene.render.border_max_y = %(border_max_y)r
    scene.render.use_compositing = bool(%(use_compositing)r)

#and check if additional files aren't missing
bpy.ops.file.report_missing_files()
